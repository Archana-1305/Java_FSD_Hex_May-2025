package com.payrollmanagement.easypay.service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.payrollmanagement.easypay.dto.MonthlyTotalNetPayDto;
import com.payrollmanagement.easypay.enums.PayslipStatus;
import com.payrollmanagement.easypay.exception.ResourceNotFoundException;
import com.payrollmanagement.easypay.model.AttendanceRecord;
import com.payrollmanagement.easypay.model.Employee;
import com.payrollmanagement.easypay.model.EmployeeMonthlyAllowances;
import com.payrollmanagement.easypay.model.IncomeTaxSlab;
import com.payrollmanagement.easypay.model.MonthReimbursement;
import com.payrollmanagement.easypay.model.PayrollPolicy;
import com.payrollmanagement.easypay.model.PayrollRun;
import com.payrollmanagement.easypay.model.Payslip;
import com.payrollmanagement.easypay.repository.AttendanceRecordRepository;
import com.payrollmanagement.easypay.repository.EmployeeMonthlyAllowancesRepository;
import com.payrollmanagement.easypay.repository.IncomeTaxSlabRepository;
import com.payrollmanagement.easypay.repository.MonthReimbursementRepository;
import com.payrollmanagement.easypay.repository.PayrollRunRepository;
import com.payrollmanagement.easypay.repository.PayslipRepository;

@Service
public class PayslipService {
     private PayslipRepository payslipRepository;
     private AttendanceRecordRepository attendanceRecordRepository;
     private EmployeeMonthlyAllowancesRepository employeeMonthlyAllowancesRepository;
     private IncomeTaxSlabRepository incomeTaxSlabRepository;
     private MonthReimbursementRepository monthReimbursementRepository;
     private PayrollRunRepository payrollRunRepository;

        
     
   



	public PayslipService(PayslipRepository payslipRepository, AttendanceRecordRepository attendanceRecordRepository,
			EmployeeMonthlyAllowancesRepository employeeMonthlyAllowancesRepository,
			IncomeTaxSlabRepository incomeTaxSlabRepository, MonthReimbursementRepository monthReimbursementRepository,
			PayrollRunRepository payrollRunRepository) {
		super();
		this.payslipRepository = payslipRepository;
		this.attendanceRecordRepository = attendanceRecordRepository;
		this.employeeMonthlyAllowancesRepository = employeeMonthlyAllowancesRepository;
		this.incomeTaxSlabRepository = incomeTaxSlabRepository;
		this.monthReimbursementRepository = monthReimbursementRepository;
		this.payrollRunRepository = payrollRunRepository;
	}




	public Payslip generatePayslipForEmployee(Employee emp, int month, int year, PayrollRun run, PayrollPolicy policy) {
        AttendanceRecord attendance = attendanceRecordRepository
                .getByEmployeeIdAndMonthAndYear(emp.getId(), month, year);
              //  .orElse(null);
        int totalWorkingDays =  attendance.getTotalWorkingDays() ;
        int totalPayableDays = attendance.getTotalPayableDays() ;
        double ctc = emp.getCtcAmount();
        
        EmployeeMonthlyAllowances allowances = employeeMonthlyAllowancesRepository
                .getByEmployeeIdAndMonthAndYear(emp.getId(), month, year);
                //.orElse(null);
        double totalAllowances = allowances != null ? allowances.getTotalAmount() : 0;
        
        MonthReimbursement reimbursement= monthReimbursementRepository
        		.getByEmployeeIdAndMonthAndYear(emp.getId(), month, year);
        double totalReimbursement= reimbursement!=null ? reimbursement.getTotalAmount():0;
        
        

        double monthlyCtc = ctc / 12.0;
        
        
        double proration = totalWorkingDays == 0 ? 1 : (double) totalPayableDays / totalWorkingDays;
        double basic = monthlyCtc * (policy.getBasicPercent() / 100.0) * proration;

        // --- Metro/non-metro HRA calculation
        boolean isMetro = true;
//        if (emp.getWorkLocation() != null && emp.getWorkLocation().getLocationType() != null) {
//            isMetro = emp.getWorkLocation().getLocationType().equalsIgnoreCase("METRO");
//        }
        double hraPercent = isMetro ? policy.getHraMetroPercent() : policy.getHraNonMetroPercent();
        double hra = monthlyCtc * (hraPercent / 100.0) * proration;

        double da = monthlyCtc * (policy.getDaPercent() / 100.0) * proration;
        double special = policy.getSpecialAllowance() * proration;
        double medical = policy.getMedicalAllowance() * proration;
        double lta = policy.getLtaAllowance() * proration;
        double foodCoupon = policy.getFoodCouponAmount() * proration;

        double pf = policy.getIsPfEnabled() ? Math.min(basic * (policy.getEmployeePfRate() / 100.0), policy.getPfCeilingAmount()) : 0;
        double esi = policy.getEsiEnabled() && monthlyCtc < policy.getEsiEligibilityCeiling()
                ? monthlyCtc * (policy.getEmployeeEsiRate() / 100.0) : 0;

        // Income Tax (basic)
        double annualGross = monthlyCtc * 12;
        IncomeTaxSlab slab = incomeTaxSlabRepository
                .findMatchingSlab(year, annualGross)
                .orElse(null);
        double taxRate = slab != null ? slab.getTaxRatePercentage() : 0.0;
        double incomeTax = (monthlyCtc * (taxRate / 100.0));

        double lossOfPay = (totalWorkingDays - totalPayableDays) > 0
                ? (monthlyCtc / totalWorkingDays) * (totalWorkingDays - totalPayableDays) : 0;

        double gross = basic + hra + da + special + medical + lta + foodCoupon + totalAllowances +totalReimbursement;
        double totalDeductions = pf + esi + incomeTax + lossOfPay;
        double netPay = gross - totalDeductions;

        Payslip payslip = new Payslip();
        payslip.setEmployee(emp);
        payslip.setPayrollRun(run);
        payslip.setMonth(month);
        payslip.setYear(year);
        payslip.setBasicPay(basic);
        payslip.setHouseRentAllowance(hra);
        payslip.setDearnessAllowance(da);
        payslip.setSpecialAllowance(special);
        payslip.setMedicalAllowance(medical);
        payslip.setLeaveTravelAllowance(lta);
        payslip.setFoodCoupon(foodCoupon);
        payslip.setTotalMonthlyAllowances(totalAllowances);
        payslip.setTotalReimbursements(totalReimbursement);

        payslip.setProvidentFund(pf);
        payslip.setEmployeeStateInsurance(esi);
        payslip.setTaxDeductedAtSource(incomeTax);
        payslip.setLossOfPayDeduction(lossOfPay);

        payslip.setGrossSalary(gross);
        payslip.setTotalDeductions(totalDeductions);
        payslip.setNetPay(netPay);

        payslip.setTotalWorkingDays(totalWorkingDays);
        payslip.setTotalPayableDays(totalPayableDays);
        payslip.setGeneratedOn(LocalDateTime.now());
        
        if (ctc <= 0) {
        	payslip.setStatus(PayslipStatus.DRAFT);
        }
        else payslip.setStatus(PayslipStatus.PENDING);

        return payslipRepository.save(payslip);
    }
    
    
    

    public Payslip updateStatus(int payslipId, PayslipStatus status) {
        Optional<Payslip> optionalPayslip = payslipRepository.findById(payslipId);
        if (optionalPayslip.isPresent()) {
            Payslip payslip = optionalPayslip.get();
            payslip.setStatus(status);
            return payslipRepository.save(payslip);
        }
        throw new RuntimeException("Payslip not found");
    }




	public List<Payslip> getPayslipsByPayrollRun(int payrollRunId) {
		payrollRunRepository.findById(payrollRunId) 
				.orElseThrow(() -> new ResourceNotFoundException("Invalid Payrun"));
		
		return payslipRepository.getPayslipsByPayrollRun(payrollRunId);
	}
	
	
	
	public void updatePayslipStatus(List<Integer> payslipIds, String status) {
        PayslipStatus enumStatus = PayslipStatus.valueOf(status); // Convert String to Enum!
        for (Integer id : payslipIds) {
            Payslip payslip = payslipRepository.findById(id).orElse(null);
            if (payslip != null) {
                payslip.setStatus(enumStatus);
                payslipRepository.save(payslip);
            }
        }
    }
    
    
//    public Payslip generatePayslipForEmployee(int employeeId, int month, int year, int  payrollRunId, int policyId) {
//    	
//    	Employee emp = employeeRepository.findById(employeeId)
//                .orElseThrow(() -> new ResourceNotFoundException("Employee not found with ID: " + employeeId));
//    	
//        AttendanceRecord attendance = attendanceRecordRepository
//                .getByEmployeeIdAndMonthAndYear(employeeId, month, year);
//                
//        int totalWorkingDays = attendance.getTotalWorkingDays() ;
//        int totalPayableDays =  attendance.getTotalPayableDays() ;
//        
//        double ctc = emp.getCtcAmount();
//        
//        EmployeeMonthlyAllowances allowances = employeeMonthlyAllowancesRepository
//                .findByEmployeeIdAndMonthAndYear(emp.getId(), month, year)
//                .orElse(null);
//        double totalAllowances = allowances != null ? allowances.getTotalAmount() : 0;
//
//        double monthlyCtc = ctc / 12.0;
//        double proration = totalWorkingDays == 0 ? 1 : (double) totalPayableDays / totalWorkingDays;
//        double basic = monthlyCtc * (policy.getBasicPercent() / 100.0) * proration;
//
//        // --- Metro/non-metro HRA calculation
//        boolean isMetro = false;
//        if (emp.getWorkLocation() != null && emp.getWorkLocation().getLocationType() != null) {
//            isMetro = emp.getWorkLocation().getLocationType().equalsIgnoreCase("METRO");
//        }
//        double hraPercent = isMetro ? policy.getHraMetroPercent() : policy.getHraNonMetroPercent();
//        double hra = monthlyCtc * (hraPercent / 100.0) * proration;
//
//        double da = monthlyCtc * (policy.getDaPercent() / 100.0) * proration;
//        double special = policy.getSpecialAllowance() * proration;
//        double medical = policy.getMedicalAllowance() * proration;
//        double lta = policy.getLtaAllowance() * proration;
//        double foodCoupon = policy.getFoodCouponAmount() * proration;
//
//        double pf = policy.getIsPfEnabled() ? Math.min(basic * (policy.getEmployeePfRate() / 100.0), policy.getPfCeilingAmount()) : 0;
//        double esi = policy.getEsiEnabled() && monthlyCtc < policy.getEsiEligibilityCeiling()
//                ? monthlyCtc * (policy.getEmployeeEsiRate() / 100.0) : 0;
//
//        // Income Tax (basic)
//        double annualGross = monthlyCtc * 12;
//        IncomeTaxSlab slab = incomeTaxSlabRepository
//                .findMatchingSlab(year, annualGross)
//                .orElse(null);
//        double taxRate = slab != null ? slab.getTaxRatePercentage() : 0.0;
//        double incomeTax = (monthlyCtc * (taxRate / 100.0));
//
//        double lossOfPay = (totalWorkingDays - totalPayableDays) > 0
//                ? (monthlyCtc / totalWorkingDays) * (totalWorkingDays - totalPayableDays) : 0;
//
//        double gross = basic + hra + da + special + medical + lta + foodCoupon + totalAllowances;
//        double totalDeductions = pf + esi + incomeTax + lossOfPay;
//        double netPay = gross - totalDeductions;
//
//        Payslip payslip = new Payslip();
//        payslip.setEmployee(emp);
//        payslip.setPayrollRun(run);
//        payslip.setMonth(month);
//        payslip.setYear(year);
//        payslip.setBasicPay(basic);
//        payslip.setHouseRentAllowance(hra);
//        payslip.setDearnessAllowance(da);
//        payslip.setSpecialAllowance(special);
//        payslip.setMedicalAllowance(medical);
//        payslip.setLeaveTravelAllowance(lta);
//        payslip.setFoodCoupon(foodCoupon);
//        payslip.setTotalMonthlyAllowances(totalAllowances);
//
//        payslip.setProvidentFund(pf);
//        payslip.setEmployeeStateInsurance(esi);
//        payslip.setTaxDeductedAtSource(incomeTax);
//        payslip.setLossOfPayDeduction(lossOfPay);
//
//        payslip.setGrossSalary(gross);
//        payslip.setTotalDeductions(totalDeductions);
//        payslip.setNetPay(netPay);
//
//        payslip.setTotalWorkingDays(totalWorkingDays);
//        payslip.setTotalPayableDays(totalPayableDays);
//        payslip.setGeneratedOn(LocalDateTime.now());
//        payslip.setStatus(PayslipStatus.PENDING);
//
//        return payslipRepository.save(payslip);
//    }
//    
	
	
	// New method for regeneration
    public Payslip regeneratePayslip(Payslip payslip) {
        Employee emp = payslip.getEmployee();
        int month = payslip.getMonth();
        int year = payslip.getYear();
        PayrollRun run = payslip.getPayrollRun();
        PayrollPolicy policy = run.getPayrollPolicy();

        // Delete the old payslip
        payslipRepository.delete(payslip);

        // Generate new payslip
        return generatePayslipForEmployee(emp, month, year, run, policy);
    }
    
    public MonthlyTotalNetPayDto getApprovedMonthlyNetPayStats() {
        List<Payslip> approvedPayslips = payslipRepository.findByStatus(PayslipStatus.APPROVED);

        // Map: (year, month) -> sum of netPay
        Map<String, Double> statsMap = new HashMap<>();
        for (Payslip payslip : approvedPayslips) {
            String key = payslip.getYear() + "-" + payslip.getMonth();
            statsMap.put(key, statsMap.getOrDefault(key, 0.0) + payslip.getNetPay());
        }

        // Prepare lists for DTO
        List<String> keys = new ArrayList<>(statsMap.keySet());
        Collections.sort(keys); // Sort by year-month

        List<Integer> years = new ArrayList<>();
        List<Integer> months = new ArrayList<>();
        List<Double> totalNetPays = new ArrayList<>();

        for (String key : keys) {
            String[] parts = key.split("-");
            years.add(Integer.parseInt(parts[0]));
            months.add(Integer.parseInt(parts[1]));
            totalNetPays.add(statsMap.get(key));
        }

        return new MonthlyTotalNetPayDto(years, months, totalNetPays);
    }
}