package com.payrollmanagement.easypay.service;

import java.util.List;

import org.springframework.stereotype.Service;

import com.payrollmanagement.easypay.enums.RequestStatus;
import com.payrollmanagement.easypay.exception.AmountExceedsMaximumException;
import com.payrollmanagement.easypay.exception.ResourceNotFoundException;
import com.payrollmanagement.easypay.model.Employee;
import com.payrollmanagement.easypay.model.ReimbursementRequest;
import com.payrollmanagement.easypay.model.ReimbursementType;
import com.payrollmanagement.easypay.repository.EmployeeRepository;
import com.payrollmanagement.easypay.repository.ReimbursementRequestRepository;
import com.payrollmanagement.easypay.repository.ReimbursementTypeRepository;

@Service

public class ReimbursementRequestService {
	
	 private  ReimbursementRequestRepository reimbursementRequestRepository;
	    private  ReimbursementTypeRepository reimbursementTypeRepository;
	    private EmployeeRepository employeeRepository;
		
	    	    
		 public ReimbursementRequestService(ReimbursementRequestRepository reimbursementRequestRepository,
				ReimbursementTypeRepository reimbursementTypeRepository, EmployeeRepository employeeRepository) {
			super();
			this.reimbursementRequestRepository = reimbursementRequestRepository;
			this.reimbursementTypeRepository = reimbursementTypeRepository;
			this.employeeRepository = employeeRepository;
		}

		// Employee submits reimbursement request
	    public ReimbursementRequest submitReimbursement(int employeeId, int reimbursementTypeId, ReimbursementRequest request) {
	        Employee employee = employeeRepository.findById(employeeId)
	                .orElseThrow(() -> new ResourceNotFoundException("Employee not found"));

	        ReimbursementType type = reimbursementTypeRepository.findById(reimbursementTypeId)
	                .orElseThrow(() -> new ResourceNotFoundException("ReimbursementType not found"));

	        if (request.getAmount() > type.getMaxAmount()) {
	            throw new AmountExceedsMaximumException("Amount exceeds the maximum allowed for this reimbursement type");
	        }

	        request.setEmployee(employee);
	        request.setReimbursementType(type);
	        request.setStatus(RequestStatus.PENDING);
	        
	        return reimbursementRequestRepository.save(request);
	    }

	    // Admin updates status and/or amount
	    public ReimbursementRequest updateStatusAndAmount(int requestId, RequestStatus status, Double amount) {
	        ReimbursementRequest req = reimbursementRequestRepository.findById(requestId)
	                .orElseThrow(() -> new ResourceNotFoundException("Reimbursement request not found"));

	        ReimbursementType type = reimbursementTypeRepository.findById(req.getReimbursementType().getId())
	                .orElseThrow(() -> new ResourceNotFoundException("ReimbursementType not found"));

	        if (amount != null) {
	            if (amount > type.getMaxAmount()) {
	                throw new AmountExceedsMaximumException("Amount exceeds the maximum allowed for this reimbursement type");
	            }
	            req.setAmount(amount);
	        }

	        req.setStatus(status);
	        return reimbursementRequestRepository.save(req);
	        

	        // If approved, recalculate the total and update all for this employee/month/year
	        if (status == RequestStatus.APPROVED) {
	            int employeeId = req.getEmployee().getId();
	            int month = req.getMonth();
	            int year = req.getYear();

	            // Get all approved requests for this employee/month/year
	            List<ReimbursementRequest> approvedRequests = reimbursementRequestRepository.getEmployeeMonthlyReimbursement(
	                    employeeId, month, year, RequestStatus.APPROVED);

	            // Calculate total
	            double total = approvedRequests.stream()
	                    .mapToDouble(ReimbursementRequest::getAmount)
	                    .sum();

	            // Update totalAmount for all such requests
	            List<ReimbursementRequest> allRequests = reimbursementRequestRepository.findByEmployeeIdAndMonthAndYear(
	                    employeeId, month, year);
	            for (ReimbursementRequest r : allRequests) {
	                r.setTotalAmount(total);
	            }
	            reimbursementRequestRepository.saveAll(allRequests);
	        }

	        return req;
	    }

		
	    

}
