package com.payrollmanagement.easypay.service;

import com.payrollmanagement.easypay.enums.RequestStatus;
import com.payrollmanagement.easypay.exception.ResourceNotFoundException;
import com.payrollmanagement.easypay.model.Employee;
import com.payrollmanagement.easypay.model.OvertimePolicy;
import com.payrollmanagement.easypay.model.OvertimeRequest;
import com.payrollmanagement.easypay.repository.EmployeeRepository;
import com.payrollmanagement.easypay.repository.OvertimePolicyRepository;
import com.payrollmanagement.easypay.repository.OvertimeRequestRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;

@Service
public class OvertimeRequestService {

    private final OvertimeRequestRepository overtimeRequestRepo;
    private final EmployeeRepository employeeRepo;
    private final OvertimePolicyRepository otPolicyRepo;

    public OvertimeRequestService(OvertimeRequestRepository overtimeRequestRepo,
                                  EmployeeRepository employeeRepo,
                                  OvertimePolicyRepository otPolicyRepo) {
        this.overtimeRequestRepo = overtimeRequestRepo;
        this.employeeRepo = employeeRepo;
        this.otPolicyRepo = otPolicyRepo;
    }

    public OvertimeRequest requestOvertime(OvertimeRequest request) {
        if (request.getEmployee() == null || request.getEmployee().getId() == 0)
            throw new IllegalArgumentException("Employee is required.");

        Employee employee = employeeRepo.findById(request.getEmployee().getId())
                .orElseThrow(() -> new ResourceNotFoundException("Employee not found"));

        OvertimePolicy otPolicy = otPolicyRepo.findByDesignationId(employee.getDesignation().getId())
                .orElseThrow(() -> new ResourceNotFoundException("No OT policy for employee designation"));

        double hours = request.getHours();
        LocalDate date = request.getDate();

        if (!otPolicy.isOtApplicable() || !otPolicy.isActive()) {
            throw new IllegalArgumentException("Overtime is not applicable for this designation.");
        }

        if (hours < otPolicy.getMinHoursPerDay() || hours > otPolicy.getMaxHoursPerDay()) {
            throw new IllegalArgumentException("Requested hours not within allowed daily range.");
        }

        int month = date.getMonthValue();
        int year = date.getYear();
        Double totalThisMonth = overtimeRequestRepo.getTotalApprovedHoursForEmployeeForMonth(employee.getId(), month, year);
        if (totalThisMonth == null) totalThisMonth = 0.0;
        if (totalThisMonth + hours > otPolicy.getMaxHoursPerMonth()) {
            throw new IllegalArgumentException("Monthly OT limit exceeded.");
        }

        request.setStatus(RequestStatus.PENDING);
        request.setEmployee(employee);
        request.setOvertimePolicy(otPolicy);
        request.setApprover(null);

        return overtimeRequestRepo.save(request);
    }

    public OvertimeRequest updateStatus(int requestId, OvertimeRequest request) {
        OvertimeRequest req = overtimeRequestRepo.findById(requestId)
                .orElseThrow(() -> new ResourceNotFoundException("OT request not found"));
        req.setStatus(request.getStatus());
        if (request.getApprover() != null && request.getApprover().getId() != 0) {
            Employee approver = employeeRepo.findById(request.getApprover().getId())
                    .orElseThrow(() -> new ResourceNotFoundException("Approver not found"));
            req.setApprover(approver);
        }
        return overtimeRequestRepo.save(req);
    }

    public List<OvertimeRequest> getRequestsByEmployee(int employeeId) {
        return overtimeRequestRepo.findByEmployeeId(employeeId);
    }

    public double getTotalApprovedHoursForEmployeeForMonth(int employeeId, int month, int year) {
        Double total = overtimeRequestRepo.getTotalApprovedHoursForEmployeeForMonth(employeeId, month, year);
        return total != null ? total : 0.0;
    }

    public double getTotalApprovedAmountForEmployeeForMonth(int employeeId, int month, int year) {
        List<OvertimeRequest> requests = overtimeRequestRepo.getApprovedRequestsForEmployeeForMonth(employeeId, month, year);
        double total = 0.0;
        for (OvertimeRequest req : requests) {
            double rate = req.getOvertimePolicy().getRatePerHour();
            total += req.getHours() * rate;
        }
        return total;
    }
}